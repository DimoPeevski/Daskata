// <auto-generated />
using System;
using Daskata.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Daskata.Infrastructure.Migrations
{
    [DbContext(typeof(DaskataDbContext))]
    partial class DaskataDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Daskata.Infrastructure.Data.Models.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the admin");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminID"));

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasComment("Foreign key referencing the associated user");

                    b.HasKey("AdminID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Admins", t =>
                        {
                            t.HasComment("App administator");
                        });
                });

            modelBuilder.Entity("Daskata.Infrastructure.Data.Models.Answer", b =>
                {
                    b.Property<int>("AnswerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the answer");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerID"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Text of the answer");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the answer is correct");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int")
                        .HasComment("Foreign key referencing the associated question");

                    b.HasKey("AnswerID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Answers", t =>
                        {
                            t.HasComment("Question answer");
                        });
                });

            modelBuilder.Entity("Daskata.Infrastructure.Data.Models.Exam", b =>
                {
                    b.Property<int>("ExamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the exam");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the exam was created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Description of the exam");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int")
                        .HasComment("Duration of the exam in minutes");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the exam is published and available for students");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the exam was last modified");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Title of the exam");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int")
                        .HasComment("otal points available in the exam");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasComment("Foreign key referencing the user who created the exam");

                    b.HasKey("ExamID");

                    b.HasIndex("UserID");

                    b.ToTable("Exams", t =>
                        {
                            t.HasComment("Exam to be passed");
                        });
                });

            modelBuilder.Entity("Daskata.Infrastructure.Data.Models.ExamAttempt", b =>
                {
                    b.Property<int>("AttemptID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the exam attempt");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttemptID"));

                    b.Property<int>("DurationTaken")
                        .HasColumnType("int")
                        .HasComment("Duration of the exam attempt in minutes");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasComment("End time of the exam attempt");

                    b.Property<int>("ExamID")
                        .HasColumnType("int")
                        .HasComment("Foreign key referencing the exam attempted");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the exam attempt is completed");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasComment("Score obtained in the exam attempt");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasComment("Start time of the exam attempt");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasComment("Foreign key referencing the user who attempted the exam");

                    b.HasKey("AttemptID");

                    b.HasIndex("ExamID");

                    b.HasIndex("UserID");

                    b.ToTable("ExamAttempts", t =>
                        {
                            t.HasComment("Exam attempted by user");
                        });
                });

            modelBuilder.Entity("Daskata.Infrastructure.Data.Models.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the question");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionID"));

                    b.Property<int>("ExamID")
                        .HasColumnType("int")
                        .HasComment("Foreign key referencing the associated exam");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Explanation or additional information for the question");

                    b.Property<bool>("IsMultipleCorrect")
                        .HasColumnType("bit")
                        .HasComment("Indicates if multiple correct answers are allowed");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int")
                        .HasComment("Order index for sorting questions within an exam");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasComment("Points assigned to the question");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Text of the question");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Type of the question (e.g., multiple choice, true/false)");

                    b.HasKey("QuestionID");

                    b.HasIndex("ExamID");

                    b.ToTable("Questions", t =>
                        {
                            t.HasComment("Question in an exam");
                        });
                });

            modelBuilder.Entity("Daskata.Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the student");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentID"));

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasComment("Foreign key referencing the associated user");

                    b.HasKey("StudentID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Students", t =>
                        {
                            t.HasComment("User with status - Student");
                        });
                });

            modelBuilder.Entity("Daskata.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the teacher");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherID"));

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasComment("Foreign key referencing the associated user");

                    b.HasKey("TeacherID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Teachers", t =>
                        {
                            t.HasComment("User with status - Teacher");
                        });
                });

            modelBuilder.Entity("Daskata.Infrastructure.Data.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for each user");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Additional information about the user");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Email address of the user for communication and verification purposes");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the user");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Indicates whether the user account is active or deactivated");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time of the user's last login");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Last name of the user");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Hashed representation of the user's password for security");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("User phone number");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("URL for the user's profile picture");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the user account was registered");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasComment("Role assigned to the user within the system (e.g., Admin, Teacher, Student)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Unique username for authentication and identification");

                    b.HasKey("UserID");

                    b.ToTable("Users", t =>
                        {
                            t.HasComment("Represents individual users within the system");
                        });
                });

            modelBuilder.Entity("Daskata.Infrastructure.Data.Models.UserExamResponse", b =>
                {
                    b.Property<int>("ResponseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the user's exam response");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseID"));

                    b.Property<int>("AttemptID")
                        .HasColumnType("int")
                        .HasComment("Foreign key referencing the associated exam attempt");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the user's response is correct");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int")
                        .HasComment("Foreign key referencing the associated question");

                    b.Property<int>("SelectedAnswerID")
                        .HasColumnType("int")
                        .HasComment("Foreign key referencing the selected answer");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ResponseID");

                    b.HasIndex("AttemptID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("SelectedAnswerID");

                    b.HasIndex("UserID");

                    b.ToTable("UserExamResponses", t =>
                        {
                            t.HasComment("Records user responses to questions");
                        });
                });

            modelBuilder.Entity("Daskata.Infrastructure.Data.Models.Admin", b =>
                {
                    b.HasOne("Daskata.Infrastructure.Data.Models.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("Daskata.Infrastructure.Data.Models.Admin", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Daskata.Infrastructure.Data.Models.Answer", b =>
                {
                    b.HasOne("Daskata.Infrastructure.Data.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Daskata.Infrastructure.Data.Models.Exam", b =>
                {
                    b.HasOne("Daskata.Infrastructure.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Daskata.Infrastructure.Data.Models.ExamAttempt", b =>
                {
                    b.HasOne("Daskata.Infrastructure.Data.Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Daskata.Infrastructure.Data.Models.User", "User")
                        .WithMany("ExamAttempts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Daskata.Infrastructure.Data.Models.Question", b =>
                {
                    b.HasOne("Daskata.Infrastructure.Data.Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Daskata.Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("Daskata.Infrastructure.Data.Models.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("Daskata.Infrastructure.Data.Models.Student", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Daskata.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.HasOne("Daskata.Infrastructure.Data.Models.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("Daskata.Infrastructure.Data.Models.Teacher", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Daskata.Infrastructure.Data.Models.UserExamResponse", b =>
                {
                    b.HasOne("Daskata.Infrastructure.Data.Models.ExamAttempt", "ExamAttempt")
                        .WithMany()
                        .HasForeignKey("AttemptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Daskata.Infrastructure.Data.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daskata.Infrastructure.Data.Models.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("SelectedAnswerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Daskata.Infrastructure.Data.Models.User", null)
                        .WithMany("UserExamResponses")
                        .HasForeignKey("UserID");

                    b.Navigation("Answer");

                    b.Navigation("ExamAttempt");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Daskata.Infrastructure.Data.Models.User", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("ExamAttempts");

                    b.Navigation("Student")
                        .IsRequired();

                    b.Navigation("Teacher")
                        .IsRequired();

                    b.Navigation("UserExamResponses");
                });
#pragma warning restore 612, 618
        }
    }
}
