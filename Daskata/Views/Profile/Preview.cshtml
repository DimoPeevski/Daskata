@using Daskata.Infrastructure.Data
@using Daskata.Infrastructure.Data.Models
@using Microsoft.AspNetCore.Identity
@using static Daskata.Core.Shared.Methods;
@using Microsoft.EntityFrameworkCore
@model Daskata.Core.ViewModels.UserProfileModel
@inject DaskataDbContext _context
@inject UserManager<UserProfile> _userManager

@{
    ViewData["Title"] = "Профил";
    var loggedUser = await _userManager.GetUserAsync(User);
    var currentUser = await _userManager.FindByNameAsync(Model.Username);
    var userRolesNames = await _userManager.GetRolesAsync(currentUser!);
    var roleName = userRolesNames.FirstOrDefault();

    var modifiedDate = Model.RegistrationDate.ToString();
    var formattedRegistrationDate = GetRegistrationMonthYearAsText(modifiedDate);
}

<div class="home-container-column mb-4">
    <div class="row profile-container-cover m-1">
        <div class="col-md-3">
            <img src="@Model.ProfilePictureUrl" class="profile-pic-edit" alt="Профилна снимка на @Model.FirstName @Model.LastName">
        </div>
        <div class="col-md-9">
            <div class="row profile-container-info">
                <div class="col profile-name-resp">
                    <span class="profile-acc-name">@Model.FirstName @Model.LastName</span>
                </div>
                <div class="col-md-8 text-end mt-2 mb-2 profile-button-resp-desktop d-flex justify-content-end">
                    @if (loggedUser != currentUser)
                    {
                        <a class="btn btn-primary button-connect me-2" href="#">Съобщение</a>
                    }
                    <a class="btn btn-primary button-connect" id="connectButtonDesktopPreview" href="#">Свържете се!</a>
                </div>
                <div class="mb-2">
                    <span class="profile-acc-username" id="viewUserUsername">@@@Model.Username</span>
                    <input type="hidden" id="loggedUserUsername" value="@loggedUser" />
                </div>
                <div class="mb-2">
                    <span class="profile-acc-username">@TranslateRoleInBG(roleName!)</span>
                </div>
                <div class="col-md-4 text-end mt-4 mb-2 profile-button-resp-mobile">
                    <a class="btn btn-primary button-connect" id="connectButtonMobilePreview" href="#">Свържете се!</a>
                </div>
                @if (loggedUser != currentUser)
                {
                    <div class="col-md-4 text-end mt-2 mb-4 profile-button-resp-mobile">
                        <a class="btn btn-primary button-connect" href="#">Съобщение</a>
                    </div>
                }
                <div class="mb-4 mt-2">
                    <span class="profile-acc-info">@Model.AdditionalInfo</span>
                </div>
                <div class="row">
                    @if (!String.IsNullOrEmpty(@Model.School))
                    {
                        <div class="col-md-4 mb-2 mt-2"><div class="profile-box"><img src="~/lib/school.png" alt="Училище"> @currentUser!.School</div></div>
                    }
                    @if (!String.IsNullOrEmpty(@Model.Location))
                    {
                        <div class="col-md-4 mb-2 mt-2"><div class="profile-box"><img src="~/lib/location.png" alt="Локация"> @currentUser!.Location</div></div>
                    }
                    <div class="col-md-4 mb-2 mt-2"><div class="profile-box"><img src="~/lib/calendar.png" alt="Дата на присъединяване"> Регистриран @formattedRegistrationDate</div></div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="home-container-column profile-exams">
    <div class="row">
        @{
            var users = await _context.UserProfiles.ToDictionaryAsync(u => u.Id);
        }
        @foreach (var exam in Model.Exams!)
        {
            if (users.TryGetValue(exam.CreatedByUserId, out var user) && exam.IsPublished && user.Id == exam.CreatedByUserId)
            {
                <div class="exam-box" onclick="previewExam('@exam.ExamUrl')">
                    <div class="exam-status @(exam.IsPublished ? "active" : "non-active")" onclick="@exam.ExamUrl)"></div>
                    <p><span class="exam-title">@exam.Title</span></p>
                    <p><span class="exam-description">@exam.Description</span></p>
                    <div class="exam-box-inner">
                        <div class="exam-box-sub"><span class="exam-sub-text">⌛ @FormatTimeSpanAsMinutes(exam.Duration)</span></div>
                        <div class="exam-box-sub"><span class="exam-sub-text">✍️ @exam.TotalPoints т.</span></div>
                        <div class="exam-box-sub"><span class="exam-sub-text">📅 @GetRegistrationMonthYearAsNumbers(exam.CreationDate.ToString())</span></div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@section Scripts {
    <script src="~/js/buttons-edit-connect.js"></script>
    <script src="~/js/reduce-title-description.js"></script>
    <script src="~/js/user-profile-fetch.js"></script>
}
